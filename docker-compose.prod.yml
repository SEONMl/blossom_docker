
version: "3"

# 실행 방법
# docker-compose -f docker-compose.prod.yml up

services:
  backend:
    build:
      context: ./backend

    command: gunicorn myapp:create_app() -b 127.0.0.1:8000 -w 2 --timeout=10 -k gevent
    env_file:
      - ./settings/.env
    environment:
      FLASK_APP: ./app.py
    networks:
      - app-tier
    volumes:
      - ./backend/:/backend/
    ports:
      - 8000:8000

  frontend:
    build:
      context: ./frontend
    command: ["yarn", "start"]

    networks:
      - app-tier
    volumes:
      - ./frontend/:/frontend
      - build_folder:/frontend/build
      - ./frontend/node_modules/:/frontend/node_modules
    ports:
      - 3000:3000

  colorization-ai:
    build:
      context: ./colorization-AI

    command: flask run --host=127.0.0.1 --port=5050

    networks:
      - app-tier
    env_file:
      - ./settings/.env
    environment:
      FLASK_APP: ./app.py
    ports:
      - 5050:5050

  nginx:
    build: ./nginx
    ports:
      - 80:8080
    volumes:
      - ./frontend/build:/var/www/frontend
    depends_on:
      - backend
      - frontend
    networks:
      - app-tier

  rabbit:
    hostname: rabbit
    image: rabbitmq:3-management
    command: rabbitmq-server
    restart: unless-stopped
    # environment:
    #   - RABBITMQ_DEFAULT_USER=admin
    #   - RABBITMQ_DEFAULT_PASS=mypass
    networks:
      - app-tier
    ports:
      - 5672:5672
      - 15672:15672
    depends_on:
      - backend
      - colorization-ai

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped  
    env_file:
      - ./settings/.env
    depends_on:
      - "rabbit"
      - "backend"
      - "colorization-ai"
    networks:
      - app-tier
    command: ["celery","-A", "tasks", "worker", "--loglevel=info"]  
    volumes:
      - ./backend:/usr/src/app
  
networks:
  app-tier:
    driver: bridge

# 컨테이너 내려도 데이터 유지되도록 함
volumes:
  media_volume: null
  build_folder: null