version: "3"

services:
  backend:
    build:
      context: ./backend

    command: flask run --host=127.0.0.1 --port=5000
    #env_file:
    #  - ./settings/.env
    environment:
      FLASK_APP: /myapp
    networks:
      - app-tier
    volumes:
      - ./backend/:/backend/
    ports:
      - 5000:5000

  frontend:
    build:
      context: ./frontend
    command: ["yarn", "start"]

    networks:
      - app-tier
    volumes:
      - ./frontend/:/frontend
      - build_folder:/frontend/build
      - ./frontend/node_modules/:/frontend/node_modules
    ports:
      - 80:3000

  colorization-ai:
    build:
      context: ./colorization-AI

    command: flask run --host=127.0.0.1 --port=5555

    networks:
      - app-tier
    env_file:
      - ./settings/.env
    environment:
      FLASK_APP: ./app.py
    ports:
      - 5555:5555

  rabbit:
    hostname: rabbit
    image: rabbitmq:3-management
    command: rabbitmq-server
    restart: unless-stopped
    # environment:
    #   - RABBITMQ_DEFAULT_USER=admin
    #   - RABBITMQ_DEFAULT_PASS=mypass
    networks:
      - app-tier
    ports:
      - 5672:5672
      - 15672:15672
    depends_on:
      - backend
      - colorization-ai

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped  
    env_file:
      - ./settings/.env
    depends_on:
      - "rabbit"
      - "backend"
      - "colorization-ai"
    networks:
      - app-tier
    command: ["celery","-A", "myapp.service.PhotoService", "worker", "--loglevel=info"]  
    volumes:
      - ./backend:/usr/src/app
  
networks:
  app-tier:
    driver: bridge

# 컨테이너 내려도 데이터 유지되도록 함
volumes:
  media_volume: null
  build_folder: null
